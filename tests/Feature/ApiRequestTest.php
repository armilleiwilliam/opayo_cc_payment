<?php

namespace Tests\Feature;

use App\PaymentRequests;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\ParameterBag;
use Tests\TestCase;

class ApiRequestTest extends TestCase
{
    private $token;

    /**
     * @return void
     */
    public function tearDown(): void
    {
        // remove the just created payment request from the database, if you want to see the
        // payment request stored just comment it
        if($this->token !== null){
            PaymentRequests::where("token", $this->token)->delete();
        }
    }

    /**
     * @param $buildPaymentRequest
     * @return void
     */
    public function setUp($buildPaymentRequest = true): void
    {
        parent::setUp(false); // TODO: Change the autogenerated stub
    }

    /**
     * Test a successfull API request
     * @return void
     */
    public function test_api_request_success()
    {
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);
        $responseJson = $response->json();

        $response->assertJson([
                "message" => "Success",
                "data" => array("token" => $responseJson["data"]["token"])
            ])
            ->assertStatus(200);
        $this->assertDatabaseHas("payment_requests", ["email" => $this->trans_request["email"]]);
        $this->token = $responseJson["data"]["token"];
    }

    /**
     * Test request success with OK status and if data are safely stored in database
     * @return void
     */
    public function test_api_request_success_with_ok_status()
    {
        $this->trans_request["status"] = "OK";
        $this->trans_request["site_id"] = 70;
        $this->trans_request["company_id"] = 8;
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);
        $responseJson = $response->json();

        $response->assertJson([
            "message" => "Success",
            "data" => array("token" => $responseJson["data"]["token"])
        ])
            ->assertStatus(200);
        $this->assertDatabaseHas("payment_requests", ["email" => $this->trans_request["email"]]);
        $this->assertDatabaseHas("transaction",
            [
                "company_id" => $this->trans_request["company_id"],
                "site_id" => $this->trans_request["site_id"],
                "site_client_id" => $this->trans_request["site_client_id"],
                "site_job_number" => $this->trans_request["site_job_number"],
                "status" => "OK",
                "amount" => $this->trans_request["amount"],
                "pre_vat" => $this->trans_request["pre_vat"],
                "currency" => $this->trans_request["currency"],
                "assigned_to" => $this->trans_request["assigned_to"],
                "PAY_Type" => "BT"
            ]);
        $this->token = $responseJson["data"]["token"];
    }

    /** THE FOLLOWING TESTS CHECK THE VALIDATION DATA CODE
     * @return void
     */
    public function test_api_request_error_validation_company_id_empty_field()
    {
        $this->trans_request["company_id"] = "";
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("company_id" => array("The company id field is required."))
            ])
            ->assertStatus(422);
    }

    /**
     * @return void
     */
    public function test_api_request_error_validation_site_id_empty_field()
    {
        $this->trans_request["site_id"] = "";
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("site_id" => array("The site id field is required."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_company_id_no_integer_field()
    {
        $this->trans_request["company_id"] = "sdfsdfs";
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("company_id" => array("The company id must be an integer."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_site_id_no_integer_field()
    {
        $this->trans_request["site_id"] = "asdfasdf";
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("site_id" => array("The site id must be an integer."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_site_client_id_no_integer_field()
    {
        $this->trans_request["site_client_id"] = "sdfsdfs";
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("site_client_id" => array("The site client id must be an integer."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_site_client_id_empty_field()
    {
        $this->trans_request["site_client_id"] = "";
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("site_client_id" => array("The site client id field is required."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_site_job_number_no_integer_field()
    {
        $this->trans_request["site_job_number"] = "sdfsdfs";
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("site_job_number" => array("The site job number must be an integer."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_site_job_number_empty_field()
    {
        $this->trans_request["site_job_number"] = "";
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("site_job_number" => array("The site job number field is required."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_first_name_no_integer_field()
    {
        $this->trans_request["first_name"] = 234234234;
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("first_name" => array("The first name must be a string."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_first_name_empty_field()
    {
        $this->trans_request["first_name"] = "";
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("first_name" => array("The first name field is required."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_last_name_no_integer_field()
    {
        $this->trans_request["last_name"] = 234234234;
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("last_name" => array("The last name must be a string."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_last_name_empty_field()
    {
        $this->trans_request["last_name"] = "";
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("last_name" => array("The last name field is required."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_email_no_integer_field()
    {
        $this->trans_request["email"] = 234234234;
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("email" => array("The email must be a valid email address.",
                "The email format is invalid."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_email_empty_field()
    {
        $this->trans_request["email"] = "";
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("email" => array("The email field is required."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_compName_empty_field()
    {
        $this->trans_request["compName"] = 23423434;
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("compName" => array("The comp name must be a string."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_address_1_empty_field()
    {
        $this->trans_request["address_1"] = "";
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("address_1" => array("The address 1 field is required."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_address_1_no_integer_field()
    {
        $this->trans_request["address_1"] = 234234234;
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("address_1" => array("The address 1 must be a string."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_address_2_no_integer_field()
    {
        $this->trans_request["address_2"] = 234234234;
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("address_2" => array("The address 2 must be a string."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_city_no_integer_field()
    {
        $this->trans_request["city"] = 234234234;
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("city" => array("The city must be a string."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_postcode_empty_field()
    {
        $this->trans_request["postcode"] = "";
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("postcode" => array("The postcode field is required."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_postcode_no_integer_field()
    {
        $this->trans_request["postcode"] = 234234234;
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("postcode" => array("The postcode must be a string."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_country_empty_field()
    {
        $this->trans_request["country"] = "";
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("country" => array("The country field is required."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_country_no_integer_field()
    {
        $this->trans_request["country"] = 234234234;
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("country" => array("The country must be a string."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_source_empty_field()
    {
        $this->trans_request["source"] = "";
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("source" => array("The source field is required."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_source_no_integer_field()
    {
        $this->trans_request["source"] = 234234234;
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("source" => array("The source must be a string."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_currency_empty_field()
    {
        $this->trans_request["currency"] = "";
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("currency" => array("The currency field is required."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_currency_no_integer_field()
    {
        $this->trans_request["currency"] = 234234234;
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("currency" => array("The currency must be a string."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_amount_empty_field()
    {
        $this->trans_request["amount"] = "";
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("amount" => array("The amount field is required."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_pre_vat_empty_field()
    {
        $this->trans_request["pre_vat"] = "";
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("pre_vat" => array("The pre vat field is required."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_vat_amount_empty_field()
    {
        $this->trans_request["vat_amount"] = "";
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("vat_amount" => array("The vat amount field is required."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_package_empty_field()
    {
        $this->trans_request["package"] = "";
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("package" => array("The package field is required."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_package_no_integer_field()
    {
        $this->trans_request["package"] = 234234234;
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("package" => array("The package must be a string."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_processed_by_empty_field()
    {
        $this->trans_request["processed_by"] = "";
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("processed_by" => array("The processed by field is required."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_processed_by_no_integer_field()
    {
        $this->trans_request["processed_by"] = 234234234;
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("processed_by" => array("The processed by must be a string."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_assigned_to_empty_field()
    {
        $this->trans_request["assigned_to"] = "";
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("assigned_to" => array("The assigned to field is required."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_assigned_to_no_integer_field()
    {
        $this->trans_request["assigned_to"] = 234234234;
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("assigned_to" => array("The assigned to must be a string."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_url_from_no_integer_field()
    {
        $this->trans_request["url_from"] = 234234234;
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Validation Error.",
            "data" => array("url_from" => array("The url from must be a string."))
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_company_id_no_existing_field()
    {
        $this->trans_request["company_id"] = 234555;
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Company ID 234555 not found"
        ])
            ->assertStatus(422);
    }

    public function test_api_request_error_validation_site_id_no_existing_field()
    {
        $this->trans_request["site_id"] = 234555;
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($this->trans_request));
        $response = $this->post('/api/request-payment', $this->trans_request);

        $response->assertJson([
            "message" => "Site ID 234555 not found"
        ])
            ->assertStatus(422);
    }

}
