<?php

namespace Tests\Feature;

use App\Http\Controllers\SagePayController;
use App\PaymentRequests;
use App\SagePay;
use App\Site;
use Illuminate\Http\Request;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Tests\TestCase;
use Mockery\MockInterface;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Str;

class SagePayTest extends TestCase
{

    public function __construct(?string $name = null, array $data = [], $dataName = '')
    {
        parent::__construct($name, $data, $dataName);
    }

    /**
     * @return void
     */
    public function setUp($buildPaymentRequest = true): void
    {
        $this->sagePayController = \Mockery::mock(SagePayController::class);
        parent::setUp($buildPaymentRequest); // TODO: Change the autogenerated stub
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_payment_gateway_form_showing_right_data_controller_index()
    {
        $_SERVER["REMOTE_ADDR"] = "127.0.0.1";
        $siteData = Site::where('site_id', '=', $this->transactionRequest->site_id)->first();
        $listCountries = SagePay::listOfCountries();

        $response = $this->json('get', '/?token=' . $this->transactionRequest->token)
            ->assertStatus(200)
            ->assertViewIs('forms.sagepayform')
            ->assertViewHas(["transaction" => $this->transactionRequest,
                "telephone_payment_version" => false,
                "site" => $siteData,
                "listCountries" => $listCountries,
                "viewOnly" => null]);

        $this->assertArrayHasKey('transaction', $response);
    }

    /**
     * Check the main methods are called
     * @return void
     */
    public function test_controller_sage_pay()
    {
        $tokenRequest = new Request(["token" => $this->transactionRequest->token]);
        $transactionRequest = $this->transactionRequest;
        $sagePayController = $this->partialMock(SagePayController::class, function (MockInterface $mock)
        use ($transactionRequest) {
            $mock->shouldReceive('buildBasket')->once()->andReturnSelf();
            $mock->shouldReceive('storeTransactionToDb')->once();
        });

        $sagePayController->index($tokenRequest);
        $this->assertTrue(true);
    }

    /**
     * @return void
     */
    public function test_controller_token_non_existing()
    {
        $token = new Request(["token" => ""]);
        $this->get('?token=')
            ->assertStatus(200)
            ->assertViewIs('errors.notoken');
    }

    /**
     * No payment request
     * @return void
     */
    public function test_controller_token_non_existing_transaction()
    {
        $this->get('?token=0000000000000000000000000')
            ->assertStatus(200)
            ->assertViewIs('errors.notoken');
    }

    /**
     * Test a successful transaction
     * @return void
     * @throws \Illuminate\Contracts\Container\BindingResolutionException
     */
    public function test_sagepay_results()
    {
        // create a Merchant ID for Opayo/SagePay credit card identifier. Even for testing purpose we need a true MerchantID provded by SagePay
        $this->merchantIdService = app()->make('Services\SagePayMerchantIdService');
        $sessionMerchantKey = $this->merchantIdService->handle([]);

        // Iframe has access to the Summary or Checkout page, once it shows up it means the transaction has been successful
        // the following code check if it shows up and the json containing data has the right content
        $response = $this->withSession(["merchantSessionId" => $sessionMerchantKey, "siteId" => $this->payRequest["site_id"]])->json("POST", route('sagepayment'), $this->payRequest)
            ->assertStatus(200)
            ->assertJson(['redirect' => true]);

        $containsIframe = Str::contains($response->getContent(), 'Redirecting to the checkout page');
        $this->assertDatabaseHas("transaction",
            [
                "company_id" => $this->trans_request["company_id"],
                "site_id" => $this->trans_request["site_id"],
                "site_client_id" => $this->trans_request["site_client_id"],
                "site_job_number" => $this->trans_request["site_job_number"],
                "status" => "NOTPROCESSED",
                "amount" => $this->trans_request["amount"],
                "pre_vat" => $this->trans_request["pre_vat"],
                "currency" => $this->trans_request["currency"],
                "assigned_to" => $this->trans_request["assigned_to"],
                "PAY_Type" => "CC"
            ]);
        $this->assertTrue($containsIframe);
    }

    /**
     * There is not payment account for this cost
     * @return void
     */
    public function test_missing_site_id_error()
    {
        Session::forget('siteId');

        // Iframe has access to the Summary or Checkout page, once it shows up it means the transaction has been successful
        // the following code check if it shows up and the json containing data has the right content
        $response = $this->json("POST", route('sagepayment'), $this->payRequest)
            ->assertJsonStructure(["message", "exception", "file", "line"])
            ->assertStatus(500);

        $containsIframe = Str::contains($response->getContent(), 'There is no payment account linked to this cost centre - unable to process');
        $this->assertTrue($containsIframe);
    }

    /**
     * @return void
     */
    public function test_missing_first_name_error()
    {
        unset($this->payRequest["first_name"]);

        // Iframe has access to the Summary or Checkout page, once it shows up it means the transaction has been successful
        // the following code check if it shows up and the json containing data has the right content
        $this->withSession(["siteId" => $this->payRequest["site_id"]])->json("POST", route('sagepayment'), $this->payRequest)
            ->assertStatus(200)
            ->assertJson([
                "error" => true,
                "errormessage" => "Authentication values are missing",
                "usefrontmodal" => true,
                "transactionStatus" => "ERROR",
                "transactionDetails" => ""
            ]);
    }

    /**
     * Wrong Card Number Error
     * @return void
     */
    public function test_wrong_cc_number_error()
    {
        $this->payRequest["first_name"] = "Tim";
        $this->payRequest["cc_number"] = "234234234";

        // create a Merchant ID for Opayo/SagePay credit card identifier. Even for testing purpose we need a true MerchantID provded by SagePay
        $this->merchantIdService = app()->make('Services\SagePayMerchantIdService');
        $sessionMerchantKey = $this->merchantIdService->handle([]);

        // Iframe has access to the Summary or Checkout page, once it shows up it means the transaction has been successful
        // the following code check if it shows up and the json containing data has the right content
        $response = $this->withSession(["merchantSessionId" => $sessionMerchantKey, "siteId" => $this->payRequest["site_id"]])->json("POST", route('sagepayment'), $this->payRequest)
            ->assertStatus(200);

        $cardNumberFailed = Str::contains($response->getContent(), 'Card number: The card number has failed our validity checks and is invalid');
        $this->assertTrue($cardNumberFailed);
    }

    /**
     * Wrong ccv Number Error
     * @return void
     */
    public function test_missing_ccv_error()
    {

        $this->payRequest["first_name"] = "Tim";
        $this->payRequest["cc_cvv"] = "";

        // create a Merchant ID for Opayo/SagePay credit card identifier. Even for testing purpose we need a true MerchantID provded by SagePay
        $this->merchantIdService = app()->make('Services\SagePayMerchantIdService');
        $sessionMerchantKey = $this->merchantIdService->handle([]);

        // Iframe has access to the Summary or Checkout page, once it shows up it means the transaction has been successful
        // the following code check if it shows up and the json containing data has the right content
        $response = $this->withSession(["merchantSessionId" => $sessionMerchantKey, "siteId" => $this->payRequest["site_id"]])
            ->json("POST", route('sagepayment'), $this->payRequest)
            ->assertStatus(200);

        $cardNumberFailed = Str::contains($response->getContent(), 'The Security Code(CV2) is required. 3D authentication failed, we were unable to process your transaction');
        $this->assertTrue($cardNumberFailed);
    }

    /**
     * The everyMonth missing validation error message changes all the times, sometime ends with "value" invalid, other times with "character" invalid
     * so, I have put "Expiry date: Contains invalid" truncating the entire message which should end either with "value" or "character"
     * @return void
     * @throws \Illuminate\Contracts\Container\BindingResolutionException
     */
    public function test_missing_cc_dates_error()
    {
        $this->payRequest["first_name"] = "Tim";
        $this->payRequest["expiryMonth"] = "";

        // create a Merchant ID for Opayo/SagePay credit card identifier. Even for testing purpose we need a true MerchantID provded by SagePay
        $this->merchantIdService = app()->make('Services\SagePayMerchantIdService');
        $sessionMerchantKey = $this->merchantIdService->handle([]);

        // Iframe has access to the Summary or Checkout page, once it shows up it means the transaction has been successful
        // the following code check if it shows up and the json containing data has the right content
        $response = $this->withSession(["merchantSessionId" => $sessionMerchantKey, "siteId" => $this->payRequest["site_id"]])
            ->json("POST", route('sagepayment'), $this->payRequest)
            ->assertStatus(200);

        $response->assertJsonStructure([
            "error",
            "errormessage",
            "usefrontmodal",
            "transactionStatus",
            "transactionDetails"
        ]);

        $contains = Str::contains($response->json()["errormessage"], "<h4>Check the following:</h4> <br/>Expiry date: Contains invalid");
        $this->assertTrue($contains);
    }
}
